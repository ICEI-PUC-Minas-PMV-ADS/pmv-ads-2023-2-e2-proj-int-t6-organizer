@using System.Security.Claims;
@model IEnumerable<gerenciadorTarefa.Models.ViewModel.MetaViewModel>
<link rel="stylesheet" href="~/css/home.css" asp-append-version="true" />

@{
    ViewData["Title"] = "Home Page";
}

<div class="content">
    <div class="card sidebar">
        <a href="/Meta/Index">
            <img class="card-img-top width imglogo " src="~/img/logoimg.png" alt="Card image cap">
        </a>
        <a asp-controller="Usuarios" asp-action="Edit" asp-route-id="@User.FindFirstValue(ClaimTypes.NameIdentifier)">
            <img class="card-img-top width" src="~/img/userimg.png" alt="Card image cap">
        </a>
        <a href="/Usuarios/Logout" onclick="return confirm('Tem certeza que deseja SAIR do Gerenciador de Tarefas?');">
            <img class="card-img-top width" src="~/img/logoutimg.png" alt="Card image cap">
        </a>
    </div>

    <div class="card box-content" style="width: 90%;">
        <div>
            <input class="search" type="text" id="pesquisaInput" placeholder="Pesquisar">
            <img class="lupaimg" src="~/img/lupaimg.png" alt="Lupa">
        </div>

        <div class="box-header">
            <div class="box1">
                <div class="box2">
                    <span class="title">Gerenciador de Metas</span>
                    <span class="subtitle">Organize, gerencie e realize!</span>
                </div>
                <div>
                    <img class="img-header" src="~/img/img-header.png">
                </div>
            </div>
            <div class="box3">
                <span class="title "> Criar nova </span>
                <div class="box4">
                    <span class="title ">Meta</span>
                    <img class="img-add " src="~/img/addimg.png" onclick="irParaPaginaCreate()">
                </div>
            </div>
        </div>

        <div class="box-list">
            <div class="guias">
                <div class="box-buttons">
                    <div id="elementoAlvo-Pessoal" class="btn-categoria pessoal" onclick="loadCategory('Pessoal')">
                        <span>Pessoal</span>
                    </div>
                    <div id="elementoAlvo-Profissional" class="btn-categoria profissional"
                        onclick="loadCategory('Profissional')">
                        <span>Profissional</span>
                    </div>
                    <div id="elementoAlvo-Academico" class="btn-categoria academico"
                        onclick="loadCategory('Academico')">
                        <span>Acadêmico</span>
                    </div>

                    <!-- Lista suspensa para status -->
                    <div class="dropdown ml-auto">
                       
                            <img onclick="loadMetas('Todos')" class="height filtro-btn" src="~/img/filtro.png" alt="Filtro" />
                        
                        <div class="dropdown-content">
                            <a href="#" onclick="loadMetas('Todos')">Todos</a>
                            <a href="#" onclick="loadMetas('Andamento')">Andamento</a>
                            <a href="#" onclick="loadMetas('Concluido')">Concluídos</a>
                            <a href="#" onclick="loadMetas('Nenhum')">Limpar filtro</a>
                        </div>
                        <!-- Exibe o filtro selecionado -->
                        <span id="filtroSelecionado"></span>
                    </div>
                </div>
            </div>

            <div class="card-list">
                <div class="card-list">
                    @{
                        var index = 0;
                    }
                    @foreach (var item in Model)
                    {
                        if (item != null)
                        {
                            <div class="gap" data-category="@item.Categoria" data-item-id="@item.Id">
                                <div class="card1">
                                    <span class="titulo">@Html.DisplayFor(modelItem => item.Titulo)</span>
                                    <div class="btn-Edit-Del">
                                        <a asp-action="Edit" asp-route-id="@item.Id"></a>
                                        <a asp-action="Delete" asp-route-id="@item.Id"></a>

                                    </div>
                                    <div class="flex">
                                        <img class="height" src="~/img/menu.png" alt="menu" onclick="toggleOpcoesEdicao(event)">
                                        <div class="opcoes-edicao" style="display: none;">
                                            <a asp-action="Edit" asp-route-id="@item.Id">Editar</a>
                                            <a asp-action="Delete" asp-route-id="@item.Id"
                                                onclick="excluirMeta('@item.Id')">Excluir</a>
                                        </div>
                                    </div>
                                </div>
                                <div>
                                    <span class="prazo">@Html.DisplayFor(modelItem => item.Prazo)</span>
                                </div>
                                <div class="barra-de-progresso-container">
                                    <div class="barra-de-progresso" id="@($"progresso-{item.Id}")">
                                        <div class="barra">
                                            <div class="progresso-text">Progresso</div>
                                            <div class="porcentagem-text" id="@($"porcentagem-{item.Id}")">0%</div>
                                        </div>
                                    </div>
                                </div>
                                <div class="checkbox-options">
                                    <form class="form-146" id="@($"form-{item.Id}")" asp-action="ChangeTaskStatus" method="post">
                                        <input id="@($"submit-{item.Id}")" type="submit" value="Salvar"
                                            style="display: none;" />
                                        <input type="hidden" name="taskId" id="@($"taskId-{item.Id}")" value="" />


                                        @foreach (var tarefa in item.Tarefas)
                                        {
                                            <div class="checkbox-option">
                                                <input type="checkbox" class="inptcolor" id="@($"checkbox-{item.Id}-{tarefa.Id}")"
                                                    data-task-id="@tarefa.Id" checked="@tarefa.Status"
                                                    onchange="atualizarProgresso('@tarefa.Status', '@item.Id', @tarefa.Id)">

                                                <label for="@($"checkbox-{item.Id}-{tarefa.Id}")">@tarefa.Nome</label>
                                            </div>
                                        }
                                    </form>
                                </div>
                            </div>
                        }
                        index++;

                    }
                </div>
            </div>

        </div>
    </div>
</div>
<script>


    window.onload = function () {
        // Run atualizarProgresso2 when the page loads
        setTimeout(() => {
            var metas = document.querySelectorAll('.gap');
            metas.forEach(function (meta) {
                var itemId = meta.getAttribute('data-item-id');
                console.log('meta', meta)
                console.log('iid', itemId)
                atualizarProgresso2(itemId);
            });

        }, 500)

    };
    // Function to get the selected status from checkboxes
    function getSelectedStatus() {
        var checkboxes = document.querySelectorAll('input[type="checkbox"]');
        var selectedStatus = [];

        checkboxes.forEach(function (checkbox) {
            if (checkbox.checked) {
                selectedStatus.push(checkbox.getAttribute('data-status'));
            }
        });

        return selectedStatus;
    }

    function loadMetas(selectedStatus) {
        var allItems = document.querySelectorAll('.gap');

        allItems.forEach(function (item) {
            var status = item.getAttribute('data-status');
            var checkboxes = item.querySelectorAll('input[type="checkbox"]');
            var anyCheckboxUnchecked = Array.from(checkboxes).some(function (checkbox) {
                if (checkboxes.length > 1) {
                    return checkbox.checked;
                }

            });
            var allCheckboxesChecked = Array.from(checkboxes).every(function (checkbox) {
                return checkbox.checked;
            });

            var allCheckboxesUnchecked = Array.from(checkboxes).every(function (checkbox) {
                return false;
            });

            if (selectedStatus.length === 0 ||
                ((selectedStatus.includes('Concluido') && allCheckboxesChecked) ||
                    (selectedStatus.includes('Andamento') && anyCheckboxUnchecked) ||
                    (!selectedStatus.includes('Concluido') && !selectedStatus.includes('Andamento'))
                    || (selectedStatus.includes('NaoConcluido') && !allCheckboxesUnchecked))
                || selectedStatus.includes('Todos')) {
                item.style.display = 'block';
            } else {
                item.style.display = 'none';
            }
        });

        // filtro selecionado
        var filtroSelecionadoSpan = document.getElementById('filtroSelecionado');
        if (filtroSelecionadoSpan) {
            if (selectedStatus === 'Nenhum') {
                filtroSelecionadoSpan.style.display = 'none';
            } else {
                filtroSelecionadoSpan.textContent = selectedStatus;
                filtroSelecionadoSpan.style.display = 'inline'; // ou 'block' dependendo do estilo desejado
            }
        }
    }

    function loadCategory(category) {
        // Save the selected category to localStorage
        localStorage.setItem('selectedCategory', category);

        console.log(category);
        var categoryItems = document.querySelectorAll(`.gap[data-category="${category}"]`);
        console.log(categoryItems);

        var allItems = document.querySelectorAll('.gap');
        allItems.forEach(item => {
            item.style.display = 'none';
        });

        categoryItems.forEach(item => {
            item.style.display = 'block';
        });

        // Adicionar classe para destacar o botão da categoria selecionada
        var buttons = document.querySelectorAll('.btn-categoria');
        buttons.forEach(button => {
            button.classList.remove('categoria-selecionada');
        });

        var selectedButton = document.getElementById(`elementoAlvo-${category}`);
        if (selectedButton) {
            selectedButton.classList.add('categoria-selecionada');
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        var selectedCategory = localStorage.getItem('selectedCategory');
        if (selectedCategory) {
            loadCategory(selectedCategory);
        } else {
            loadCategory('Profissional'); // Default category if none is saved
        }
    });

    function atualizarProgresso(status, itemId, taskId) {
        document.getElementById(`taskId-${itemId}`).value = taskId;
        document.getElementById('submit-' + itemId).click();
    @* var checkboxes = document.querySelectorAll(`input[type="checkbox"][id="checkbox-${itemId}"]`);
            var progressoId = `progresso-${itemId}`;
            var checkboxesMarcados = Array.from(checkboxes).filter(checkbox => checkbox.checked).length;

            console.log(checkboxesMarcados)
            console.log(checkboxes.length)
            var progresso = ((checkboxesMarcados / checkboxes.length) * 100).toFixed(1);
            console.log(progresso)

            // Ensure the progress bar container and text elements exist
            var progressBar = document.getElementById(progressoId);
            var progressText = document.querySelector(`#${progressoId} .porcentagem-text`);

            if (progressBar && progressText) {
            progressBar.style.width = progresso + '%';
            progressText.textContent = progresso + '%';
            } *@
    }

    function atualizarProgresso2(itemId) {
        var checkboxes = document.querySelectorAll(`input[type="checkbox"][data-task-id][id^="checkbox-${itemId}"]`);

        checkboxes.forEach(function (checkbox) {
            var taskId = checkbox.getAttribute('data-task-id');
            // Use taskId as needed
        });
        var progressoId = `progresso-${itemId}`;
        console.log(Array.from(checkboxes))
        var checkboxesMarcados = Array.from(checkboxes).filter(checkbox => checkbox.checked).length;

        console.log('ATUALIZAR PROGRESSO')
        console.log(checkboxesMarcados)
        console.log(checkboxes.length)
        var progresso = ((checkboxesMarcados / checkboxes.length) * 100).toFixed(1);
        console.log(progresso)

        // Ensure the progress bar container and text elements exist
        var progressBar = document.getElementById(progressoId);
        var progressText = document.querySelector(`#${progressoId} .porcentagem-text`);

        if (progressBar && progressText) {
            progressBar.style.width = progresso + '%';
            progressText.textContent = progresso + '%';
        }
    }

    function toggleOpcoesEdicao(event) {
        var opcoesEdicao = event.target.nextElementSibling; // Obtém o próximo elemento irmão

        if (opcoesEdicao.style.display === 'none' || opcoesEdicao.style.display === '') {
            opcoesEdicao.style.display = 'block';
        } else {
            opcoesEdicao.style.display = 'none';
        }
    }

    document.getElementById('pesquisaInput').addEventListener('input', function (event) {
        var termoPesquisa = event.target.value.toLowerCase();
        var metas = document.querySelectorAll('.gap');

        for (var i = 0; i < metas.length; i++) {
            var nomeMeta = metas[i].querySelector('.card1 span').innerText.toLowerCase();

            if (nomeMeta.includes(termoPesquisa)) {
                metas[i].style.display = 'block';
            } else {
                metas[i].style.display = 'none';
            }
        }
    });


    function irParaPaginaCreate() {
        // Redireciona para a página Create
        window.location.href = '/Meta/Create'; // Substitua 'SuaController' pelo nome real do seu controller
        console.log("teste")
    }


    //--------//



    function changeTaskStatus(taskId) {
        // Use AJAX para chamar a ação no controlador
        $.ajax({
            url: "/Meta/ChangeTaskStatus",
            //  data: { taskId: taskId },
            type: 'POST',
            contentType: 'application/json', // or 'application/x-www-form-urlencoded'
            dataType: 'json', // or 'text' depending on the expected response type
            success: function () {
                // Success handling
            },
            error: function (xhr, status, error) {
                console.error(xhr.responseText);
                alert('Erro ao mudar o status da tarefa.');
                // Error handling
            }
        });
    }

</script>